// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: results.proto

#ifndef PROTOBUF_results_2eproto__INCLUDED
#define PROTOBUF_results_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Results {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_results_2eproto();
void protobuf_AssignDesc_results_2eproto();
void protobuf_ShutdownFile_results_2eproto();

class Consumption;
class Execution;
class Result;

// ===================================================================

class Consumption : public ::google::protobuf::Message {
 public:
  Consumption();
  virtual ~Consumption();

  Consumption(const Consumption& from);

  inline Consumption& operator=(const Consumption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Consumption& default_instance();

  void Swap(Consumption* other);

  // implements Message ----------------------------------------------

  Consumption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Consumption& from);
  void MergeFrom(const Consumption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nActiveCores = 1;
  inline bool has_nactivecores() const;
  inline void clear_nactivecores();
  static const int kNActiveCoresFieldNumber = 1;
  inline ::google::protobuf::int32 nactivecores() const;
  inline void set_nactivecores(::google::protobuf::int32 value);

  // required double meanPower = 2;
  inline bool has_meanpower() const;
  inline void clear_meanpower();
  static const int kMeanPowerFieldNumber = 2;
  inline double meanpower() const;
  inline void set_meanpower(double value);

  // required double alpha = 3;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  inline double alpha() const;
  inline void set_alpha(double value);

  // @@protoc_insertion_point(class_scope:Results.Consumption)
 private:
  inline void set_has_nactivecores();
  inline void clear_has_nactivecores();
  inline void set_has_meanpower();
  inline void clear_has_meanpower();
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double meanpower_;
  double alpha_;
  ::google::protobuf::int32 nactivecores_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_results_2eproto();
  friend void protobuf_AssignDesc_results_2eproto();
  friend void protobuf_ShutdownFile_results_2eproto();

  void InitAsDefaultInstance();
  static Consumption* default_instance_;
};
// -------------------------------------------------------------------

class Execution : public ::google::protobuf::Message {
 public:
  Execution();
  virtual ~Execution();

  Execution(const Execution& from);

  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Execution& default_instance();

  void Swap(Execution* other);

  // implements Message ----------------------------------------------

  Execution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Execution& from);
  void MergeFrom(const Execution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 TSA = 1;
  inline bool has_tsa() const;
  inline void clear_tsa();
  static const int kTSAFieldNumber = 1;
  inline ::google::protobuf::int32 tsa() const;
  inline void set_tsa(::google::protobuf::int32 value);

  // required int32 CSA = 2;
  inline bool has_csa() const;
  inline void clear_csa();
  static const int kCSAFieldNumber = 2;
  inline ::google::protobuf::int32 csa() const;
  inline void set_csa(::google::protobuf::int32 value);

  // required int32 nOfTasks = 3;
  inline bool has_noftasks() const;
  inline void clear_noftasks();
  static const int kNOfTasksFieldNumber = 3;
  inline ::google::protobuf::int32 noftasks() const;
  inline void set_noftasks(::google::protobuf::int32 value);

  // required double u = 4;
  inline bool has_u() const;
  inline void clear_u();
  static const int kUFieldNumber = 4;
  inline double u() const;
  inline void set_u(double value);

  // required bool feasible = 5;
  inline bool has_feasible() const;
  inline void clear_feasible();
  static const int kFeasibleFieldNumber = 5;
  inline bool feasible() const;
  inline void set_feasible(bool value);

  // repeated .Results.Consumption sfa = 6;
  inline int sfa_size() const;
  inline void clear_sfa();
  static const int kSfaFieldNumber = 6;
  inline const ::Results::Consumption& sfa(int index) const;
  inline ::Results::Consumption* mutable_sfa(int index);
  inline ::Results::Consumption* add_sfa();
  inline const ::google::protobuf::RepeatedPtrField< ::Results::Consumption >&
      sfa() const;
  inline ::google::protobuf::RepeatedPtrField< ::Results::Consumption >*
      mutable_sfa();

  // repeated .Results.Consumption no_sfa = 7;
  inline int no_sfa_size() const;
  inline void clear_no_sfa();
  static const int kNoSfaFieldNumber = 7;
  inline const ::Results::Consumption& no_sfa(int index) const;
  inline ::Results::Consumption* mutable_no_sfa(int index);
  inline ::Results::Consumption* add_no_sfa();
  inline const ::google::protobuf::RepeatedPtrField< ::Results::Consumption >&
      no_sfa() const;
  inline ::google::protobuf::RepeatedPtrField< ::Results::Consumption >*
      mutable_no_sfa();

  // required string partitioningFile = 8;
  inline bool has_partitioningfile() const;
  inline void clear_partitioningfile();
  static const int kPartitioningFileFieldNumber = 8;
  inline const ::std::string& partitioningfile() const;
  inline void set_partitioningfile(const ::std::string& value);
  inline void set_partitioningfile(const char* value);
  inline void set_partitioningfile(const char* value, size_t size);
  inline ::std::string* mutable_partitioningfile();
  inline ::std::string* release_partitioningfile();
  inline void set_allocated_partitioningfile(::std::string* partitioningfile);

  // @@protoc_insertion_point(class_scope:Results.Execution)
 private:
  inline void set_has_tsa();
  inline void clear_has_tsa();
  inline void set_has_csa();
  inline void clear_has_csa();
  inline void set_has_noftasks();
  inline void clear_has_noftasks();
  inline void set_has_u();
  inline void clear_has_u();
  inline void set_has_feasible();
  inline void clear_has_feasible();
  inline void set_has_partitioningfile();
  inline void clear_has_partitioningfile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tsa_;
  ::google::protobuf::int32 csa_;
  double u_;
  ::google::protobuf::int32 noftasks_;
  bool feasible_;
  ::google::protobuf::RepeatedPtrField< ::Results::Consumption > sfa_;
  ::google::protobuf::RepeatedPtrField< ::Results::Consumption > no_sfa_;
  ::std::string* partitioningfile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_results_2eproto();
  friend void protobuf_AssignDesc_results_2eproto();
  friend void protobuf_ShutdownFile_results_2eproto();

  void InitAsDefaultInstance();
  static Execution* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Results.Execution iterations = 1;
  inline int iterations_size() const;
  inline void clear_iterations();
  static const int kIterationsFieldNumber = 1;
  inline const ::Results::Execution& iterations(int index) const;
  inline ::Results::Execution* mutable_iterations(int index);
  inline ::Results::Execution* add_iterations();
  inline const ::google::protobuf::RepeatedPtrField< ::Results::Execution >&
      iterations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Results::Execution >*
      mutable_iterations();

  // required string hwFile = 2;
  inline bool has_hwfile() const;
  inline void clear_hwfile();
  static const int kHwFileFieldNumber = 2;
  inline const ::std::string& hwfile() const;
  inline void set_hwfile(const ::std::string& value);
  inline void set_hwfile(const char* value);
  inline void set_hwfile(const char* value, size_t size);
  inline ::std::string* mutable_hwfile();
  inline ::std::string* release_hwfile();
  inline void set_allocated_hwfile(::std::string* hwfile);

  // @@protoc_insertion_point(class_scope:Results.Result)
 private:
  inline void set_has_hwfile();
  inline void clear_has_hwfile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Results::Execution > iterations_;
  ::std::string* hwfile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_results_2eproto();
  friend void protobuf_AssignDesc_results_2eproto();
  friend void protobuf_ShutdownFile_results_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// Consumption

// required int32 nActiveCores = 1;
inline bool Consumption::has_nactivecores() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Consumption::set_has_nactivecores() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Consumption::clear_has_nactivecores() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Consumption::clear_nactivecores() {
  nactivecores_ = 0;
  clear_has_nactivecores();
}
inline ::google::protobuf::int32 Consumption::nactivecores() const {
  return nactivecores_;
}
inline void Consumption::set_nactivecores(::google::protobuf::int32 value) {
  set_has_nactivecores();
  nactivecores_ = value;
}

// required double meanPower = 2;
inline bool Consumption::has_meanpower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Consumption::set_has_meanpower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Consumption::clear_has_meanpower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Consumption::clear_meanpower() {
  meanpower_ = 0;
  clear_has_meanpower();
}
inline double Consumption::meanpower() const {
  return meanpower_;
}
inline void Consumption::set_meanpower(double value) {
  set_has_meanpower();
  meanpower_ = value;
}

// required double alpha = 3;
inline bool Consumption::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Consumption::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Consumption::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Consumption::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline double Consumption::alpha() const {
  return alpha_;
}
inline void Consumption::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
}

// -------------------------------------------------------------------

// Execution

// required int32 TSA = 1;
inline bool Execution::has_tsa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Execution::set_has_tsa() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Execution::clear_has_tsa() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Execution::clear_tsa() {
  tsa_ = 0;
  clear_has_tsa();
}
inline ::google::protobuf::int32 Execution::tsa() const {
  return tsa_;
}
inline void Execution::set_tsa(::google::protobuf::int32 value) {
  set_has_tsa();
  tsa_ = value;
}

// required int32 CSA = 2;
inline bool Execution::has_csa() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Execution::set_has_csa() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Execution::clear_has_csa() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Execution::clear_csa() {
  csa_ = 0;
  clear_has_csa();
}
inline ::google::protobuf::int32 Execution::csa() const {
  return csa_;
}
inline void Execution::set_csa(::google::protobuf::int32 value) {
  set_has_csa();
  csa_ = value;
}

// required int32 nOfTasks = 3;
inline bool Execution::has_noftasks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Execution::set_has_noftasks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Execution::clear_has_noftasks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Execution::clear_noftasks() {
  noftasks_ = 0;
  clear_has_noftasks();
}
inline ::google::protobuf::int32 Execution::noftasks() const {
  return noftasks_;
}
inline void Execution::set_noftasks(::google::protobuf::int32 value) {
  set_has_noftasks();
  noftasks_ = value;
}

// required double u = 4;
inline bool Execution::has_u() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Execution::set_has_u() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Execution::clear_has_u() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Execution::clear_u() {
  u_ = 0;
  clear_has_u();
}
inline double Execution::u() const {
  return u_;
}
inline void Execution::set_u(double value) {
  set_has_u();
  u_ = value;
}

// required bool feasible = 5;
inline bool Execution::has_feasible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Execution::set_has_feasible() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Execution::clear_has_feasible() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Execution::clear_feasible() {
  feasible_ = false;
  clear_has_feasible();
}
inline bool Execution::feasible() const {
  return feasible_;
}
inline void Execution::set_feasible(bool value) {
  set_has_feasible();
  feasible_ = value;
}

// repeated .Results.Consumption sfa = 6;
inline int Execution::sfa_size() const {
  return sfa_.size();
}
inline void Execution::clear_sfa() {
  sfa_.Clear();
}
inline const ::Results::Consumption& Execution::sfa(int index) const {
  return sfa_.Get(index);
}
inline ::Results::Consumption* Execution::mutable_sfa(int index) {
  return sfa_.Mutable(index);
}
inline ::Results::Consumption* Execution::add_sfa() {
  return sfa_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Results::Consumption >&
Execution::sfa() const {
  return sfa_;
}
inline ::google::protobuf::RepeatedPtrField< ::Results::Consumption >*
Execution::mutable_sfa() {
  return &sfa_;
}

// repeated .Results.Consumption no_sfa = 7;
inline int Execution::no_sfa_size() const {
  return no_sfa_.size();
}
inline void Execution::clear_no_sfa() {
  no_sfa_.Clear();
}
inline const ::Results::Consumption& Execution::no_sfa(int index) const {
  return no_sfa_.Get(index);
}
inline ::Results::Consumption* Execution::mutable_no_sfa(int index) {
  return no_sfa_.Mutable(index);
}
inline ::Results::Consumption* Execution::add_no_sfa() {
  return no_sfa_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Results::Consumption >&
Execution::no_sfa() const {
  return no_sfa_;
}
inline ::google::protobuf::RepeatedPtrField< ::Results::Consumption >*
Execution::mutable_no_sfa() {
  return &no_sfa_;
}

// required string partitioningFile = 8;
inline bool Execution::has_partitioningfile() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Execution::set_has_partitioningfile() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Execution::clear_has_partitioningfile() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Execution::clear_partitioningfile() {
  if (partitioningfile_ != &::google::protobuf::internal::kEmptyString) {
    partitioningfile_->clear();
  }
  clear_has_partitioningfile();
}
inline const ::std::string& Execution::partitioningfile() const {
  return *partitioningfile_;
}
inline void Execution::set_partitioningfile(const ::std::string& value) {
  set_has_partitioningfile();
  if (partitioningfile_ == &::google::protobuf::internal::kEmptyString) {
    partitioningfile_ = new ::std::string;
  }
  partitioningfile_->assign(value);
}
inline void Execution::set_partitioningfile(const char* value) {
  set_has_partitioningfile();
  if (partitioningfile_ == &::google::protobuf::internal::kEmptyString) {
    partitioningfile_ = new ::std::string;
  }
  partitioningfile_->assign(value);
}
inline void Execution::set_partitioningfile(const char* value, size_t size) {
  set_has_partitioningfile();
  if (partitioningfile_ == &::google::protobuf::internal::kEmptyString) {
    partitioningfile_ = new ::std::string;
  }
  partitioningfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execution::mutable_partitioningfile() {
  set_has_partitioningfile();
  if (partitioningfile_ == &::google::protobuf::internal::kEmptyString) {
    partitioningfile_ = new ::std::string;
  }
  return partitioningfile_;
}
inline ::std::string* Execution::release_partitioningfile() {
  clear_has_partitioningfile();
  if (partitioningfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partitioningfile_;
    partitioningfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Execution::set_allocated_partitioningfile(::std::string* partitioningfile) {
  if (partitioningfile_ != &::google::protobuf::internal::kEmptyString) {
    delete partitioningfile_;
  }
  if (partitioningfile) {
    set_has_partitioningfile();
    partitioningfile_ = partitioningfile;
  } else {
    clear_has_partitioningfile();
    partitioningfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Result

// repeated .Results.Execution iterations = 1;
inline int Result::iterations_size() const {
  return iterations_.size();
}
inline void Result::clear_iterations() {
  iterations_.Clear();
}
inline const ::Results::Execution& Result::iterations(int index) const {
  return iterations_.Get(index);
}
inline ::Results::Execution* Result::mutable_iterations(int index) {
  return iterations_.Mutable(index);
}
inline ::Results::Execution* Result::add_iterations() {
  return iterations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Results::Execution >&
Result::iterations() const {
  return iterations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Results::Execution >*
Result::mutable_iterations() {
  return &iterations_;
}

// required string hwFile = 2;
inline bool Result::has_hwfile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_hwfile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_hwfile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_hwfile() {
  if (hwfile_ != &::google::protobuf::internal::kEmptyString) {
    hwfile_->clear();
  }
  clear_has_hwfile();
}
inline const ::std::string& Result::hwfile() const {
  return *hwfile_;
}
inline void Result::set_hwfile(const ::std::string& value) {
  set_has_hwfile();
  if (hwfile_ == &::google::protobuf::internal::kEmptyString) {
    hwfile_ = new ::std::string;
  }
  hwfile_->assign(value);
}
inline void Result::set_hwfile(const char* value) {
  set_has_hwfile();
  if (hwfile_ == &::google::protobuf::internal::kEmptyString) {
    hwfile_ = new ::std::string;
  }
  hwfile_->assign(value);
}
inline void Result::set_hwfile(const char* value, size_t size) {
  set_has_hwfile();
  if (hwfile_ == &::google::protobuf::internal::kEmptyString) {
    hwfile_ = new ::std::string;
  }
  hwfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_hwfile() {
  set_has_hwfile();
  if (hwfile_ == &::google::protobuf::internal::kEmptyString) {
    hwfile_ = new ::std::string;
  }
  return hwfile_;
}
inline ::std::string* Result::release_hwfile() {
  clear_has_hwfile();
  if (hwfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hwfile_;
    hwfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Result::set_allocated_hwfile(::std::string* hwfile) {
  if (hwfile_ != &::google::protobuf::internal::kEmptyString) {
    delete hwfile_;
  }
  if (hwfile) {
    set_has_hwfile();
    hwfile_ = hwfile;
  } else {
    clear_has_hwfile();
    hwfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Results

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_results_2eproto__INCLUDED
