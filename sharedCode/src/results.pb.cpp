// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "results.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GlobalResults {

namespace {

const ::google::protobuf::Descriptor* Consumption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Consumption_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlgorithmInvocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlgorithmInvocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_results_2eproto() {
  protobuf_AddDesc_results_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "results.proto");
  GOOGLE_CHECK(file != NULL);
  Consumption_descriptor_ = file->message_type(0);
  static const int Consumption_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumption, core_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumption, meanp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumption, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumption, noftasks_),
  };
  Consumption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Consumption_descriptor_,
      Consumption::default_instance_,
      Consumption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Consumption));
  AlgorithmInvocation_descriptor_ = file->message_type(1);
  static const int AlgorithmInvocation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, tsa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, csa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, nofcores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, cons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, feasible_),
  };
  AlgorithmInvocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlgorithmInvocation_descriptor_,
      AlgorithmInvocation::default_instance_,
      AlgorithmInvocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmInvocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlgorithmInvocation));
  GlobalResult_descriptor_ = file->message_type(2);
  static const int GlobalResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalResult, results_),
  };
  GlobalResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalResult_descriptor_,
      GlobalResult::default_instance_,
      GlobalResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_results_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Consumption_descriptor_, &Consumption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlgorithmInvocation_descriptor_, &AlgorithmInvocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalResult_descriptor_, &GlobalResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_results_2eproto() {
  delete Consumption::default_instance_;
  delete Consumption_reflection_;
  delete AlgorithmInvocation::default_instance_;
  delete AlgorithmInvocation_reflection_;
  delete GlobalResult::default_instance_;
  delete GlobalResult_reflection_;
}

void protobuf_AddDesc_results_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rresults.proto\022\rGlobalResults\"G\n\013Consum"
    "ption\022\014\n\004core\030\001 \002(\005\022\r\n\005meanP\030\002 \002(\001\022\t\n\001u\030"
    "\003 \002(\001\022\020\n\010nOfTasks\030\004 \002(\005\"\210\001\n\023AlgorithmInv"
    "ocation\022\013\n\003TSA\030\001 \002(\005\022\013\n\003CSA\030\002 \002(\005\022\020\n\010nOf"
    "Cores\030\003 \002(\005\022\t\n\001u\030\004 \002(\001\022(\n\004cons\030\005 \003(\0132\032.G"
    "lobalResults.Consumption\022\020\n\010feasible\030\006 \002"
    "(\010\"C\n\014GlobalResult\0223\n\007results\030\001 \003(\0132\".Gl"
    "obalResults.AlgorithmInvocation", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "results.proto", &protobuf_RegisterTypes);
  Consumption::default_instance_ = new Consumption();
  AlgorithmInvocation::default_instance_ = new AlgorithmInvocation();
  GlobalResult::default_instance_ = new GlobalResult();
  Consumption::default_instance_->InitAsDefaultInstance();
  AlgorithmInvocation::default_instance_->InitAsDefaultInstance();
  GlobalResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_results_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_results_2eproto {
  StaticDescriptorInitializer_results_2eproto() {
    protobuf_AddDesc_results_2eproto();
  }
} static_descriptor_initializer_results_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Consumption::kCoreFieldNumber;
const int Consumption::kMeanPFieldNumber;
const int Consumption::kUFieldNumber;
const int Consumption::kNOfTasksFieldNumber;
#endif  // !_MSC_VER

Consumption::Consumption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Consumption::InitAsDefaultInstance() {
}

Consumption::Consumption(const Consumption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Consumption::SharedCtor() {
  _cached_size_ = 0;
  core_ = 0;
  meanp_ = 0;
  u_ = 0;
  noftasks_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Consumption::~Consumption() {
  SharedDtor();
}

void Consumption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Consumption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Consumption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Consumption_descriptor_;
}

const Consumption& Consumption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_results_2eproto();  return *default_instance_;
}

Consumption* Consumption::default_instance_ = NULL;

Consumption* Consumption::New() const {
  return new Consumption;
}

void Consumption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    core_ = 0;
    meanp_ = 0;
    u_ = 0;
    noftasks_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Consumption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 core = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_)));
          set_has_core();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_meanP;
        break;
      }
      
      // required double meanP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_meanP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &meanp_)));
          set_has_meanp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_u;
        break;
      }
      
      // required double u = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_u:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nOfTasks;
        break;
      }
      
      // required int32 nOfTasks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nOfTasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noftasks_)));
          set_has_noftasks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Consumption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 core = 1;
  if (has_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->core(), output);
  }
  
  // required double meanP = 2;
  if (has_meanp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->meanp(), output);
  }
  
  // required double u = 3;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->u(), output);
  }
  
  // required int32 nOfTasks = 4;
  if (has_noftasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->noftasks(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Consumption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 core = 1;
  if (has_core()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->core(), target);
  }
  
  // required double meanP = 2;
  if (has_meanp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->meanp(), target);
  }
  
  // required double u = 3;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->u(), target);
  }
  
  // required int32 nOfTasks = 4;
  if (has_noftasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->noftasks(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Consumption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 core = 1;
    if (has_core()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->core());
    }
    
    // required double meanP = 2;
    if (has_meanp()) {
      total_size += 1 + 8;
    }
    
    // required double u = 3;
    if (has_u()) {
      total_size += 1 + 8;
    }
    
    // required int32 nOfTasks = 4;
    if (has_noftasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noftasks());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Consumption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Consumption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Consumption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Consumption::MergeFrom(const Consumption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_core()) {
      set_core(from.core());
    }
    if (from.has_meanp()) {
      set_meanp(from.meanp());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_noftasks()) {
      set_noftasks(from.noftasks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Consumption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Consumption::CopyFrom(const Consumption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Consumption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Consumption::Swap(Consumption* other) {
  if (other != this) {
    std::swap(core_, other->core_);
    std::swap(meanp_, other->meanp_);
    std::swap(u_, other->u_);
    std::swap(noftasks_, other->noftasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Consumption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Consumption_descriptor_;
  metadata.reflection = Consumption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlgorithmInvocation::kTSAFieldNumber;
const int AlgorithmInvocation::kCSAFieldNumber;
const int AlgorithmInvocation::kNOfCoresFieldNumber;
const int AlgorithmInvocation::kUFieldNumber;
const int AlgorithmInvocation::kConsFieldNumber;
const int AlgorithmInvocation::kFeasibleFieldNumber;
#endif  // !_MSC_VER

AlgorithmInvocation::AlgorithmInvocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlgorithmInvocation::InitAsDefaultInstance() {
}

AlgorithmInvocation::AlgorithmInvocation(const AlgorithmInvocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlgorithmInvocation::SharedCtor() {
  _cached_size_ = 0;
  tsa_ = 0;
  csa_ = 0;
  nofcores_ = 0;
  u_ = 0;
  feasible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlgorithmInvocation::~AlgorithmInvocation() {
  SharedDtor();
}

void AlgorithmInvocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlgorithmInvocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlgorithmInvocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgorithmInvocation_descriptor_;
}

const AlgorithmInvocation& AlgorithmInvocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_results_2eproto();  return *default_instance_;
}

AlgorithmInvocation* AlgorithmInvocation::default_instance_ = NULL;

AlgorithmInvocation* AlgorithmInvocation::New() const {
  return new AlgorithmInvocation;
}

void AlgorithmInvocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tsa_ = 0;
    csa_ = 0;
    nofcores_ = 0;
    u_ = 0;
    feasible_ = false;
  }
  cons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlgorithmInvocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TSA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsa_)));
          set_has_tsa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CSA;
        break;
      }
      
      // required int32 CSA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CSA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csa_)));
          set_has_csa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nOfCores;
        break;
      }
      
      // required int32 nOfCores = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nOfCores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nofcores_)));
          set_has_nofcores();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_u;
        break;
      }
      
      // required double u = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_u:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cons;
        break;
      }
      
      // repeated .GlobalResults.Consumption cons = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cons;
        if (input->ExpectTag(48)) goto parse_feasible;
        break;
      }
      
      // required bool feasible = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feasible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feasible_)));
          set_has_feasible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlgorithmInvocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 TSA = 1;
  if (has_tsa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tsa(), output);
  }
  
  // required int32 CSA = 2;
  if (has_csa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->csa(), output);
  }
  
  // required int32 nOfCores = 3;
  if (has_nofcores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nofcores(), output);
  }
  
  // required double u = 4;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->u(), output);
  }
  
  // repeated .GlobalResults.Consumption cons = 5;
  for (int i = 0; i < this->cons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cons(i), output);
  }
  
  // required bool feasible = 6;
  if (has_feasible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->feasible(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlgorithmInvocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 TSA = 1;
  if (has_tsa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tsa(), target);
  }
  
  // required int32 CSA = 2;
  if (has_csa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->csa(), target);
  }
  
  // required int32 nOfCores = 3;
  if (has_nofcores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nofcores(), target);
  }
  
  // required double u = 4;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->u(), target);
  }
  
  // repeated .GlobalResults.Consumption cons = 5;
  for (int i = 0; i < this->cons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cons(i), target);
  }
  
  // required bool feasible = 6;
  if (has_feasible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->feasible(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlgorithmInvocation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TSA = 1;
    if (has_tsa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsa());
    }
    
    // required int32 CSA = 2;
    if (has_csa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csa());
    }
    
    // required int32 nOfCores = 3;
    if (has_nofcores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nofcores());
    }
    
    // required double u = 4;
    if (has_u()) {
      total_size += 1 + 8;
    }
    
    // required bool feasible = 6;
    if (has_feasible()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .GlobalResults.Consumption cons = 5;
  total_size += 1 * this->cons_size();
  for (int i = 0; i < this->cons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cons(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlgorithmInvocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlgorithmInvocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlgorithmInvocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlgorithmInvocation::MergeFrom(const AlgorithmInvocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  cons_.MergeFrom(from.cons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tsa()) {
      set_tsa(from.tsa());
    }
    if (from.has_csa()) {
      set_csa(from.csa());
    }
    if (from.has_nofcores()) {
      set_nofcores(from.nofcores());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_feasible()) {
      set_feasible(from.feasible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlgorithmInvocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmInvocation::CopyFrom(const AlgorithmInvocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmInvocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  
  for (int i = 0; i < cons_size(); i++) {
    if (!this->cons(i).IsInitialized()) return false;
  }
  return true;
}

void AlgorithmInvocation::Swap(AlgorithmInvocation* other) {
  if (other != this) {
    std::swap(tsa_, other->tsa_);
    std::swap(csa_, other->csa_);
    std::swap(nofcores_, other->nofcores_);
    std::swap(u_, other->u_);
    cons_.Swap(&other->cons_);
    std::swap(feasible_, other->feasible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlgorithmInvocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlgorithmInvocation_descriptor_;
  metadata.reflection = AlgorithmInvocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalResult::kResultsFieldNumber;
#endif  // !_MSC_VER

GlobalResult::GlobalResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalResult::InitAsDefaultInstance() {
}

GlobalResult::GlobalResult(const GlobalResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalResult::~GlobalResult() {
  SharedDtor();
}

void GlobalResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalResult_descriptor_;
}

const GlobalResult& GlobalResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_results_2eproto();  return *default_instance_;
}

GlobalResult* GlobalResult::default_instance_ = NULL;

GlobalResult* GlobalResult::New() const {
  return new GlobalResult;
}

void GlobalResult::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GlobalResults.AlgorithmInvocation results = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GlobalResults.AlgorithmInvocation results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GlobalResults.AlgorithmInvocation results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalResult::ByteSize() const {
  int total_size = 0;
  
  // repeated .GlobalResults.AlgorithmInvocation results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalResult::MergeFrom(const GlobalResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalResult::CopyFrom(const GlobalResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalResult::IsInitialized() const {
  
  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalResult::Swap(GlobalResult* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalResult_descriptor_;
  metadata.reflection = GlobalResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GlobalResults

// @@protoc_insertion_point(global_scope)
