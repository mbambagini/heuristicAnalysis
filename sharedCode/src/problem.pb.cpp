// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "problem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Problem {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Software_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Software_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coefficients_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coefficients_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsAtSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsAtSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hardware_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hardware_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_problem_2eproto() {
  protobuf_AddDesc_problem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "problem.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wcet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wcets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, deadline_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Software_descriptor_ = file->message_type(1);
  static const int Software_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, real_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, nofresources_),
  };
  Software_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Software_descriptor_,
      Software::default_instance_,
      Software_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Software));
  Coefficients_descriptor_ = file->message_type(2);
  static const int Coefficients_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, k0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, k3_),
  };
  Coefficients_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coefficients_descriptor_,
      Coefficients::default_instance_,
      Coefficients_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coefficients));
  ConsAtSpeed_descriptor_ = file->message_type(3);
  static const int ConsAtSpeed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsAtSpeed, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsAtSpeed, coeffs_),
  };
  ConsAtSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsAtSpeed_descriptor_,
      ConsAtSpeed::default_instance_,
      ConsAtSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsAtSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsAtSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsAtSpeed));
  Hardware_descriptor_ = file->message_type(4);
  static const int Hardware_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, nofclusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, cpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, cons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, nofresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, resources_),
  };
  Hardware_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hardware_descriptor_,
      Hardware::default_instance_,
      Hardware_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hardware));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_problem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Software_descriptor_, &Software::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coefficients_descriptor_, &Coefficients::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsAtSpeed_descriptor_, &ConsAtSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hardware_descriptor_, &Hardware::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_problem_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete Software::default_instance_;
  delete Software_reflection_;
  delete Coefficients::default_instance_;
  delete Coefficients_reflection_;
  delete ConsAtSpeed::default_instance_;
  delete ConsAtSpeed_reflection_;
  delete Hardware::default_instance_;
  delete Hardware_reflection_;
}

void protobuf_AddDesc_problem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rproblem.proto\022\007Problem\"Q\n\004Task\022\n\n\002id\030\001"
    " \002(\005\022\014\n\004wcet\030\002 \002(\005\022\r\n\005wcets\030\003 \003(\005\022\016\n\006per"
    "iod\030\004 \002(\005\022\020\n\010deadline\030\005 \002(\005\"Y\n\010Software\022"
    "\034\n\005tasks\030\001 \003(\0132\r.Problem.Task\022\t\n\001U\030\002 \002(\001"
    "\022\016\n\006real_U\030\003 \002(\001\022\024\n\014nOfResources\030\004 \002(\005\">"
    "\n\014Coefficients\022\n\n\002k0\030\001 \002(\001\022\n\n\002k1\030\002 \002(\001\022\n"
    "\n\002k2\030\003 \002(\001\022\n\n\002k3\030\004 \002(\001\"C\n\013ConsAtSpeed\022\r\n"
    "\005speed\030\001 \002(\001\022%\n\006coeffs\030\002 \002(\0132\025.Problem.C"
    "oefficients\"y\n\010Hardware\022\023\n\013nOfClusters\030\001"
    " \002(\005\022\013\n\003CpC\030\002 \002(\005\022\"\n\004cons\030\003 \003(\0132\024.Proble"
    "m.ConsAtSpeed\022\024\n\014nOfResources\030\004 \002(\005\022\021\n\tr"
    "esources\030\005 \003(\005", 454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "problem.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  Software::default_instance_ = new Software();
  Coefficients::default_instance_ = new Coefficients();
  ConsAtSpeed::default_instance_ = new ConsAtSpeed();
  Hardware::default_instance_ = new Hardware();
  Task::default_instance_->InitAsDefaultInstance();
  Software::default_instance_->InitAsDefaultInstance();
  Coefficients::default_instance_->InitAsDefaultInstance();
  ConsAtSpeed::default_instance_->InitAsDefaultInstance();
  Hardware::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_problem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_problem_2eproto {
  StaticDescriptorInitializer_problem_2eproto() {
    protobuf_AddDesc_problem_2eproto();
  }
} static_descriptor_initializer_problem_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kWcetFieldNumber;
const int Task::kWcetsFieldNumber;
const int Task::kPeriodFieldNumber;
const int Task::kDeadlineFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  wcet_ = 0;
  period_ = 0;
  deadline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    wcet_ = 0;
    period_ = 0;
    deadline_ = 0;
  }
  wcets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wcet;
        break;
      }
      
      // required int32 wcet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wcet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wcet_)));
          set_has_wcet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wcets;
        break;
      }
      
      // repeated int32 wcets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wcets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_wcets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wcets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wcets;
        if (input->ExpectTag(32)) goto parse_period;
        break;
      }
      
      // required int32 period = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deadline;
        break;
      }
      
      // required int32 deadline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 wcet = 2;
  if (has_wcet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wcet(), output);
  }
  
  // repeated int32 wcets = 3;
  for (int i = 0; i < this->wcets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->wcets(i), output);
  }
  
  // required int32 period = 4;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->period(), output);
  }
  
  // required int32 deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deadline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 wcet = 2;
  if (has_wcet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wcet(), target);
  }
  
  // repeated int32 wcets = 3;
  for (int i = 0; i < this->wcets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->wcets(i), target);
  }
  
  // required int32 period = 4;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->period(), target);
  }
  
  // required int32 deadline = 5;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deadline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 wcet = 2;
    if (has_wcet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wcet());
    }
    
    // required int32 period = 4;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }
    
    // required int32 deadline = 5;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadline());
    }
    
  }
  // repeated int32 wcets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->wcets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wcets(i));
    }
    total_size += 1 * this->wcets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  wcets_.MergeFrom(from.wcets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wcet()) {
      set_wcet(from.wcet());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wcet_, other->wcet_);
    wcets_.Swap(&other->wcets_);
    std::swap(period_, other->period_);
    std::swap(deadline_, other->deadline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Software::kTasksFieldNumber;
const int Software::kUFieldNumber;
const int Software::kRealUFieldNumber;
const int Software::kNOfResourcesFieldNumber;
#endif  // !_MSC_VER

Software::Software()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Software::InitAsDefaultInstance() {
}

Software::Software(const Software& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Software::SharedCtor() {
  _cached_size_ = 0;
  u_ = 0;
  real_u_ = 0;
  nofresources_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Software::~Software() {
  SharedDtor();
}

void Software::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Software::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Software::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Software_descriptor_;
}

const Software& Software::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

Software* Software::default_instance_ = NULL;

Software* Software::New() const {
  return new Software;
}

void Software::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    u_ = 0;
    real_u_ = 0;
    nofresources_ = 0;
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Software::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Problem.Task tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectTag(17)) goto parse_U;
        break;
      }
      
      // required double U = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_U:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_real_U;
        break;
      }
      
      // required double real_U = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real_U:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_u_)));
          set_has_real_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nOfResources;
        break;
      }
      
      // required int32 nOfResources = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nOfResources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nofresources_)));
          set_has_nofresources();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Software::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Problem.Task tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }
  
  // required double U = 2;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->u(), output);
  }
  
  // required double real_U = 3;
  if (has_real_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->real_u(), output);
  }
  
  // required int32 nOfResources = 4;
  if (has_nofresources()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nofresources(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Software::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Problem.Task tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }
  
  // required double U = 2;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->u(), target);
  }
  
  // required double real_U = 3;
  if (has_real_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->real_u(), target);
  }
  
  // required int32 nOfResources = 4;
  if (has_nofresources()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nofresources(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Software::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double U = 2;
    if (has_u()) {
      total_size += 1 + 8;
    }
    
    // required double real_U = 3;
    if (has_real_u()) {
      total_size += 1 + 8;
    }
    
    // required int32 nOfResources = 4;
    if (has_nofresources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nofresources());
    }
    
  }
  // repeated .Problem.Task tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Software::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Software* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Software*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Software::MergeFrom(const Software& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_real_u()) {
      set_real_u(from.real_u());
    }
    if (from.has_nofresources()) {
      set_nofresources(from.nofresources());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Software::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Software::CopyFrom(const Software& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Software::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void Software::Swap(Software* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(u_, other->u_);
    std::swap(real_u_, other->real_u_);
    std::swap(nofresources_, other->nofresources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Software::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Software_descriptor_;
  metadata.reflection = Software_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coefficients::kK0FieldNumber;
const int Coefficients::kK1FieldNumber;
const int Coefficients::kK2FieldNumber;
const int Coefficients::kK3FieldNumber;
#endif  // !_MSC_VER

Coefficients::Coefficients()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coefficients::InitAsDefaultInstance() {
}

Coefficients::Coefficients(const Coefficients& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coefficients::SharedCtor() {
  _cached_size_ = 0;
  k0_ = 0;
  k1_ = 0;
  k2_ = 0;
  k3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coefficients::~Coefficients() {
  SharedDtor();
}

void Coefficients::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Coefficients::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coefficients::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coefficients_descriptor_;
}

const Coefficients& Coefficients::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

Coefficients* Coefficients::default_instance_ = NULL;

Coefficients* Coefficients::New() const {
  return new Coefficients;
}

void Coefficients::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    k0_ = 0;
    k1_ = 0;
    k2_ = 0;
    k3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coefficients::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double k0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k0_)));
          set_has_k0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_k1;
        break;
      }
      
      // required double k1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k1_)));
          set_has_k1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_k2;
        break;
      }
      
      // required double k2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k2_)));
          set_has_k2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_k3;
        break;
      }
      
      // required double k3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k3_)));
          set_has_k3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coefficients::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double k0 = 1;
  if (has_k0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->k0(), output);
  }
  
  // required double k1 = 2;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->k1(), output);
  }
  
  // required double k2 = 3;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k2(), output);
  }
  
  // required double k3 = 4;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->k3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coefficients::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double k0 = 1;
  if (has_k0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->k0(), target);
  }
  
  // required double k1 = 2;
  if (has_k1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->k1(), target);
  }
  
  // required double k2 = 3;
  if (has_k2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k2(), target);
  }
  
  // required double k3 = 4;
  if (has_k3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->k3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coefficients::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double k0 = 1;
    if (has_k0()) {
      total_size += 1 + 8;
    }
    
    // required double k1 = 2;
    if (has_k1()) {
      total_size += 1 + 8;
    }
    
    // required double k2 = 3;
    if (has_k2()) {
      total_size += 1 + 8;
    }
    
    // required double k3 = 4;
    if (has_k3()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coefficients::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coefficients* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coefficients*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coefficients::MergeFrom(const Coefficients& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k0()) {
      set_k0(from.k0());
    }
    if (from.has_k1()) {
      set_k1(from.k1());
    }
    if (from.has_k2()) {
      set_k2(from.k2());
    }
    if (from.has_k3()) {
      set_k3(from.k3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coefficients::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coefficients::CopyFrom(const Coefficients& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coefficients::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Coefficients::Swap(Coefficients* other) {
  if (other != this) {
    std::swap(k0_, other->k0_);
    std::swap(k1_, other->k1_);
    std::swap(k2_, other->k2_);
    std::swap(k3_, other->k3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coefficients::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coefficients_descriptor_;
  metadata.reflection = Coefficients_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsAtSpeed::kSpeedFieldNumber;
const int ConsAtSpeed::kCoeffsFieldNumber;
#endif  // !_MSC_VER

ConsAtSpeed::ConsAtSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsAtSpeed::InitAsDefaultInstance() {
  coeffs_ = const_cast< ::Problem::Coefficients*>(&::Problem::Coefficients::default_instance());
}

ConsAtSpeed::ConsAtSpeed(const ConsAtSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsAtSpeed::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  coeffs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsAtSpeed::~ConsAtSpeed() {
  SharedDtor();
}

void ConsAtSpeed::SharedDtor() {
  if (this != default_instance_) {
    delete coeffs_;
  }
}

void ConsAtSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsAtSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsAtSpeed_descriptor_;
}

const ConsAtSpeed& ConsAtSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

ConsAtSpeed* ConsAtSpeed::default_instance_ = NULL;

ConsAtSpeed* ConsAtSpeed::New() const {
  return new ConsAtSpeed;
}

void ConsAtSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speed_ = 0;
    if (has_coeffs()) {
      if (coeffs_ != NULL) coeffs_->::Problem::Coefficients::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsAtSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double speed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_coeffs;
        break;
      }
      
      // required .Problem.Coefficients coeffs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coeffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coeffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsAtSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }
  
  // required .Problem.Coefficients coeffs = 2;
  if (has_coeffs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->coeffs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsAtSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }
  
  // required .Problem.Coefficients coeffs = 2;
  if (has_coeffs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->coeffs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsAtSpeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double speed = 1;
    if (has_speed()) {
      total_size += 1 + 8;
    }
    
    // required .Problem.Coefficients coeffs = 2;
    if (has_coeffs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coeffs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsAtSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsAtSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsAtSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsAtSpeed::MergeFrom(const ConsAtSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_coeffs()) {
      mutable_coeffs()->::Problem::Coefficients::MergeFrom(from.coeffs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsAtSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsAtSpeed::CopyFrom(const ConsAtSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsAtSpeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_coeffs()) {
    if (!this->coeffs().IsInitialized()) return false;
  }
  return true;
}

void ConsAtSpeed::Swap(ConsAtSpeed* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(coeffs_, other->coeffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsAtSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsAtSpeed_descriptor_;
  metadata.reflection = ConsAtSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hardware::kNOfClustersFieldNumber;
const int Hardware::kCpCFieldNumber;
const int Hardware::kConsFieldNumber;
const int Hardware::kNOfResourcesFieldNumber;
const int Hardware::kResourcesFieldNumber;
#endif  // !_MSC_VER

Hardware::Hardware()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hardware::InitAsDefaultInstance() {
}

Hardware::Hardware(const Hardware& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hardware::SharedCtor() {
  _cached_size_ = 0;
  nofclusters_ = 0;
  cpc_ = 0;
  nofresources_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hardware::~Hardware() {
  SharedDtor();
}

void Hardware::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hardware::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hardware::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hardware_descriptor_;
}

const Hardware& Hardware::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

Hardware* Hardware::default_instance_ = NULL;

Hardware* Hardware::New() const {
  return new Hardware;
}

void Hardware::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nofclusters_ = 0;
    cpc_ = 0;
    nofresources_ = 0;
  }
  cons_.Clear();
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hardware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nOfClusters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nofclusters_)));
          set_has_nofclusters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CpC;
        break;
      }
      
      // required int32 CpC = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CpC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpc_)));
          set_has_cpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cons;
        break;
      }
      
      // repeated .Problem.ConsAtSpeed cons = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cons;
        if (input->ExpectTag(32)) goto parse_nOfResources;
        break;
      }
      
      // required int32 nOfResources = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nOfResources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nofresources_)));
          set_has_nofresources();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resources;
        break;
      }
      
      // repeated int32 resources = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_resources())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_resources())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hardware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nOfClusters = 1;
  if (has_nofclusters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nofclusters(), output);
  }
  
  // required int32 CpC = 2;
  if (has_cpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpc(), output);
  }
  
  // repeated .Problem.ConsAtSpeed cons = 3;
  for (int i = 0; i < this->cons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cons(i), output);
  }
  
  // required int32 nOfResources = 4;
  if (has_nofresources()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nofresources(), output);
  }
  
  // repeated int32 resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->resources(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hardware::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nOfClusters = 1;
  if (has_nofclusters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nofclusters(), target);
  }
  
  // required int32 CpC = 2;
  if (has_cpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cpc(), target);
  }
  
  // repeated .Problem.ConsAtSpeed cons = 3;
  for (int i = 0; i < this->cons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cons(i), target);
  }
  
  // required int32 nOfResources = 4;
  if (has_nofresources()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nofresources(), target);
  }
  
  // repeated int32 resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->resources(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hardware::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nOfClusters = 1;
    if (has_nofclusters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nofclusters());
    }
    
    // required int32 CpC = 2;
    if (has_cpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpc());
    }
    
    // required int32 nOfResources = 4;
    if (has_nofresources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nofresources());
    }
    
  }
  // repeated .Problem.ConsAtSpeed cons = 3;
  total_size += 1 * this->cons_size();
  for (int i = 0; i < this->cons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cons(i));
  }
  
  // repeated int32 resources = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->resources_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->resources(i));
    }
    total_size += 1 * this->resources_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hardware::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hardware* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hardware*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hardware::MergeFrom(const Hardware& from) {
  GOOGLE_CHECK_NE(&from, this);
  cons_.MergeFrom(from.cons_);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nofclusters()) {
      set_nofclusters(from.nofclusters());
    }
    if (from.has_cpc()) {
      set_cpc(from.cpc());
    }
    if (from.has_nofresources()) {
      set_nofresources(from.nofresources());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hardware::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hardware::CopyFrom(const Hardware& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hardware::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  for (int i = 0; i < cons_size(); i++) {
    if (!this->cons(i).IsInitialized()) return false;
  }
  return true;
}

void Hardware::Swap(Hardware* other) {
  if (other != this) {
    std::swap(nofclusters_, other->nofclusters_);
    std::swap(cpc_, other->cpc_);
    cons_.Swap(&other->cons_);
    std::swap(nofresources_, other->nofresources_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hardware::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hardware_descriptor_;
  metadata.reflection = Hardware_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Problem

// @@protoc_insertion_point(global_scope)
