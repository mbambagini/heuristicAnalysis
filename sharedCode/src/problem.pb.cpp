// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "problem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Problem {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Software_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Software_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessorType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hardware_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hardware_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_problem_2eproto() {
  protobuf_AddDesc_problem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "problem.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wcet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wcets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, deadline_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Software_descriptor_ = file->message_type(1);
  static const int Software_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, units_),
  };
  Software_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Software_descriptor_,
      Software::default_instance_,
      Software_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Software, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Software));
  ProcessorType_descriptor_ = file->message_type(2);
  static const int ProcessorType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, pidle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, psleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, pactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, pswitching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, speed_),
  };
  ProcessorType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorType_descriptor_,
      ProcessorType::default_instance_,
      ProcessorType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorType));
  Hardware_descriptor_ = file->message_type(3);
  static const int Hardware_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, processors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, nofresources_),
  };
  Hardware_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hardware_descriptor_,
      Hardware::default_instance_,
      Hardware_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hardware, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hardware));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_problem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Software_descriptor_, &Software::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorType_descriptor_, &ProcessorType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hardware_descriptor_, &Hardware::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_problem_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete Software::default_instance_;
  delete Software_reflection_;
  delete ProcessorType::default_instance_;
  delete ProcessorType_reflection_;
  delete Hardware::default_instance_;
  delete Hardware_reflection_;
}

void protobuf_AddDesc_problem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rproblem.proto\022\007Problem\"Q\n\004Task\022\n\n\002id\030\001"
    " \002(\005\022\014\n\004wcet\030\002 \002(\005\022\r\n\005wcets\030\003 \003(\005\022\016\n\006per"
    "iod\030\004 \002(\005\022\020\n\010deadline\030\005 \002(\005\"B\n\010Software\022"
    "\034\n\005tasks\030\001 \003(\0132\r.Problem.Task\022\t\n\001U\030\002 \002(\001"
    "\022\r\n\005units\030\003 \002(\005\"{\n\rProcessorType\022\n\n\002id\030\001"
    " \002(\005\022\r\n\005Pidle\030\002 \002(\001\022\016\n\006Psleep\030\003 \002(\001\022\017\n\007P"
    "active\030\004 \002(\001\022\022\n\nPswitching\030\005 \002(\001\022\013\n\003bet\030"
    "\006 \002(\001\022\r\n\005speed\030\007 \003(\005\"[\n\010Hardware\022%\n\005type"
    "s\030\001 \003(\0132\026.Problem.ProcessorType\022\022\n\nproce"
    "ssors\030\002 \003(\005\022\024\n\014nOfResources\030\003 \002(\005", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "problem.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  Software::default_instance_ = new Software();
  ProcessorType::default_instance_ = new ProcessorType();
  Hardware::default_instance_ = new Hardware();
  Task::default_instance_->InitAsDefaultInstance();
  Software::default_instance_->InitAsDefaultInstance();
  ProcessorType::default_instance_->InitAsDefaultInstance();
  Hardware::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_problem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_problem_2eproto {
  StaticDescriptorInitializer_problem_2eproto() {
    protobuf_AddDesc_problem_2eproto();
  }
} static_descriptor_initializer_problem_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kWcetFieldNumber;
const int Task::kWcetsFieldNumber;
const int Task::kPeriodFieldNumber;
const int Task::kDeadlineFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  wcet_ = 0;
  period_ = 0;
  deadline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    wcet_ = 0;
    period_ = 0;
    deadline_ = 0;
  }
  wcets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wcet;
        break;
      }
      
      // required int32 wcet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wcet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wcet_)));
          set_has_wcet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wcets;
        break;
      }
      
      // repeated int32 wcets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wcets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_wcets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wcets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wcets;
        if (input->ExpectTag(32)) goto parse_period;
        break;
      }
      
      // required int32 period = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deadline;
        break;
      }
      
      // required int32 deadline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 wcet = 2;
  if (has_wcet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wcet(), output);
  }
  
  // repeated int32 wcets = 3;
  for (int i = 0; i < this->wcets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->wcets(i), output);
  }
  
  // required int32 period = 4;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->period(), output);
  }
  
  // required int32 deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deadline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 wcet = 2;
  if (has_wcet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wcet(), target);
  }
  
  // repeated int32 wcets = 3;
  for (int i = 0; i < this->wcets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->wcets(i), target);
  }
  
  // required int32 period = 4;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->period(), target);
  }
  
  // required int32 deadline = 5;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deadline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 wcet = 2;
    if (has_wcet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wcet());
    }
    
    // required int32 period = 4;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }
    
    // required int32 deadline = 5;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadline());
    }
    
  }
  // repeated int32 wcets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->wcets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wcets(i));
    }
    total_size += 1 * this->wcets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  wcets_.MergeFrom(from.wcets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wcet()) {
      set_wcet(from.wcet());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wcet_, other->wcet_);
    wcets_.Swap(&other->wcets_);
    std::swap(period_, other->period_);
    std::swap(deadline_, other->deadline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Software::kTasksFieldNumber;
const int Software::kUFieldNumber;
const int Software::kUnitsFieldNumber;
#endif  // !_MSC_VER

Software::Software()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Software::InitAsDefaultInstance() {
}

Software::Software(const Software& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Software::SharedCtor() {
  _cached_size_ = 0;
  u_ = 0;
  units_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Software::~Software() {
  SharedDtor();
}

void Software::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Software::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Software::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Software_descriptor_;
}

const Software& Software::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

Software* Software::default_instance_ = NULL;

Software* Software::New() const {
  return new Software;
}

void Software::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    u_ = 0;
    units_ = 0;
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Software::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Problem.Task tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectTag(17)) goto parse_U;
        break;
      }
      
      // required double U = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_U:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_units;
        break;
      }
      
      // required int32 units = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &units_)));
          set_has_units();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Software::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Problem.Task tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }
  
  // required double U = 2;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->u(), output);
  }
  
  // required int32 units = 3;
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->units(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Software::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Problem.Task tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }
  
  // required double U = 2;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->u(), target);
  }
  
  // required int32 units = 3;
  if (has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->units(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Software::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double U = 2;
    if (has_u()) {
      total_size += 1 + 8;
    }
    
    // required int32 units = 3;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->units());
    }
    
  }
  // repeated .Problem.Task tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Software::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Software* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Software*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Software::MergeFrom(const Software& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_units()) {
      set_units(from.units());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Software::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Software::CopyFrom(const Software& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Software::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void Software::Swap(Software* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(u_, other->u_);
    std::swap(units_, other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Software::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Software_descriptor_;
  metadata.reflection = Software_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessorType::kIdFieldNumber;
const int ProcessorType::kPidleFieldNumber;
const int ProcessorType::kPsleepFieldNumber;
const int ProcessorType::kPactiveFieldNumber;
const int ProcessorType::kPswitchingFieldNumber;
const int ProcessorType::kBetFieldNumber;
const int ProcessorType::kSpeedFieldNumber;
#endif  // !_MSC_VER

ProcessorType::ProcessorType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorType::InitAsDefaultInstance() {
}

ProcessorType::ProcessorType(const ProcessorType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pidle_ = 0;
  psleep_ = 0;
  pactive_ = 0;
  pswitching_ = 0;
  bet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorType::~ProcessorType() {
  SharedDtor();
}

void ProcessorType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessorType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorType_descriptor_;
}

const ProcessorType& ProcessorType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

ProcessorType* ProcessorType::default_instance_ = NULL;

ProcessorType* ProcessorType::New() const {
  return new ProcessorType;
}

void ProcessorType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pidle_ = 0;
    psleep_ = 0;
    pactive_ = 0;
    pswitching_ = 0;
    bet_ = 0;
  }
  speed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Pidle;
        break;
      }
      
      // required double Pidle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pidle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pidle_)));
          set_has_pidle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Psleep;
        break;
      }
      
      // required double Psleep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Psleep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &psleep_)));
          set_has_psleep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Pactive;
        break;
      }
      
      // required double Pactive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pactive_)));
          set_has_pactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Pswitching;
        break;
      }
      
      // required double Pswitching = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pswitching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pswitching_)));
          set_has_pswitching();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_bet;
        break;
      }
      
      // required double bet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_speed;
        break;
      }
      
      // repeated int32 speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_speed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_speed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_speed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required double Pidle = 2;
  if (has_pidle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pidle(), output);
  }
  
  // required double Psleep = 3;
  if (has_psleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->psleep(), output);
  }
  
  // required double Pactive = 4;
  if (has_pactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pactive(), output);
  }
  
  // required double Pswitching = 5;
  if (has_pswitching()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pswitching(), output);
  }
  
  // required double bet = 6;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bet(), output);
  }
  
  // repeated int32 speed = 7;
  for (int i = 0; i < this->speed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->speed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required double Pidle = 2;
  if (has_pidle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pidle(), target);
  }
  
  // required double Psleep = 3;
  if (has_psleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->psleep(), target);
  }
  
  // required double Pactive = 4;
  if (has_pactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pactive(), target);
  }
  
  // required double Pswitching = 5;
  if (has_pswitching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pswitching(), target);
  }
  
  // required double bet = 6;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bet(), target);
  }
  
  // repeated int32 speed = 7;
  for (int i = 0; i < this->speed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->speed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required double Pidle = 2;
    if (has_pidle()) {
      total_size += 1 + 8;
    }
    
    // required double Psleep = 3;
    if (has_psleep()) {
      total_size += 1 + 8;
    }
    
    // required double Pactive = 4;
    if (has_pactive()) {
      total_size += 1 + 8;
    }
    
    // required double Pswitching = 5;
    if (has_pswitching()) {
      total_size += 1 + 8;
    }
    
    // required double bet = 6;
    if (has_bet()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated int32 speed = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->speed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->speed(i));
    }
    total_size += 1 * this->speed_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorType::MergeFrom(const ProcessorType& from) {
  GOOGLE_CHECK_NE(&from, this);
  speed_.MergeFrom(from.speed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pidle()) {
      set_pidle(from.pidle());
    }
    if (from.has_psleep()) {
      set_psleep(from.psleep());
    }
    if (from.has_pactive()) {
      set_pactive(from.pactive());
    }
    if (from.has_pswitching()) {
      set_pswitching(from.pswitching());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorType::CopyFrom(const ProcessorType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ProcessorType::Swap(ProcessorType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pidle_, other->pidle_);
    std::swap(psleep_, other->psleep_);
    std::swap(pactive_, other->pactive_);
    std::swap(pswitching_, other->pswitching_);
    std::swap(bet_, other->bet_);
    speed_.Swap(&other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorType_descriptor_;
  metadata.reflection = ProcessorType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hardware::kTypesFieldNumber;
const int Hardware::kProcessorsFieldNumber;
const int Hardware::kNOfResourcesFieldNumber;
#endif  // !_MSC_VER

Hardware::Hardware()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hardware::InitAsDefaultInstance() {
}

Hardware::Hardware(const Hardware& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hardware::SharedCtor() {
  _cached_size_ = 0;
  nofresources_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hardware::~Hardware() {
  SharedDtor();
}

void Hardware::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hardware::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hardware::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hardware_descriptor_;
}

const Hardware& Hardware::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_problem_2eproto();  return *default_instance_;
}

Hardware* Hardware::default_instance_ = NULL;

Hardware* Hardware::New() const {
  return new Hardware;
}

void Hardware::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    nofresources_ = 0;
  }
  types_.Clear();
  processors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hardware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Problem.ProcessorType types = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_types;
        if (input->ExpectTag(16)) goto parse_processors;
        break;
      }
      
      // repeated int32 processors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_processors())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_processors())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_processors;
        if (input->ExpectTag(24)) goto parse_nOfResources;
        break;
      }
      
      // required int32 nOfResources = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nOfResources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nofresources_)));
          set_has_nofresources();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hardware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Problem.ProcessorType types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->types(i), output);
  }
  
  // repeated int32 processors = 2;
  for (int i = 0; i < this->processors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->processors(i), output);
  }
  
  // required int32 nOfResources = 3;
  if (has_nofresources()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nofresources(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hardware::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Problem.ProcessorType types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->types(i), target);
  }
  
  // repeated int32 processors = 2;
  for (int i = 0; i < this->processors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->processors(i), target);
  }
  
  // required int32 nOfResources = 3;
  if (has_nofresources()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nofresources(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hardware::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 nOfResources = 3;
    if (has_nofresources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nofresources());
    }
    
  }
  // repeated .Problem.ProcessorType types = 1;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->types(i));
  }
  
  // repeated int32 processors = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->processors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->processors(i));
    }
    total_size += 1 * this->processors_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hardware::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hardware* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hardware*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hardware::MergeFrom(const Hardware& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  processors_.MergeFrom(from.processors_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_nofresources()) {
      set_nofresources(from.nofresources());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hardware::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hardware::CopyFrom(const Hardware& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hardware::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < types_size(); i++) {
    if (!this->types(i).IsInitialized()) return false;
  }
  return true;
}

void Hardware::Swap(Hardware* other) {
  if (other != this) {
    types_.Swap(&other->types_);
    processors_.Swap(&other->processors_);
    std::swap(nofresources_, other->nofresources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hardware::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hardware_descriptor_;
  metadata.reflection = Hardware_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Problem

// @@protoc_insertion_point(global_scope)
