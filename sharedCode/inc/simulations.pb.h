// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simulations.proto

#ifndef PROTOBUF_simulations_2eproto__INCLUDED
#define PROTOBUF_simulations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Simulations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_simulations_2eproto();
void protobuf_AssignDesc_simulations_2eproto();
void protobuf_ShutdownFile_simulations_2eproto();

class Task;
class Result;
class Simulation;

// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();
  
  Task(const Task& from);
  
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();
  
  void Swap(Task* other);
  
  // implements Message ----------------------------------------------
  
  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 period = 2;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 period() const;
  inline void set_period(::google::protobuf::int32 value);
  
  // required int32 deadline = 3;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 3;
  inline ::google::protobuf::int32 deadline() const;
  inline void set_deadline(::google::protobuf::int32 value);
  
  // required int32 wcet = 4;
  inline bool has_wcet() const;
  inline void clear_wcet();
  static const int kWcetFieldNumber = 4;
  inline ::google::protobuf::int32 wcet() const;
  inline void set_wcet(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Simulations.Task)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_wcet();
  inline void clear_has_wcet();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 period_;
  ::google::protobuf::int32 deadline_;
  ::google::protobuf::int32 wcet_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_simulations_2eproto();
  friend void protobuf_AssignDesc_simulations_2eproto();
  friend void protobuf_ShutdownFile_simulations_2eproto();
  
  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();
  
  Result(const Result& from);
  
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();
  
  void Swap(Result* other);
  
  // implements Message ----------------------------------------------
  
  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float activeTime = 1;
  inline bool has_activetime() const;
  inline void clear_activetime();
  static const int kActiveTimeFieldNumber = 1;
  inline float activetime() const;
  inline void set_activetime(float value);
  
  // required float sleepTime = 2;
  inline bool has_sleeptime() const;
  inline void clear_sleeptime();
  static const int kSleepTimeFieldNumber = 2;
  inline float sleeptime() const;
  inline void set_sleeptime(float value);
  
  // required float switchingTime = 3;
  inline bool has_switchingtime() const;
  inline void clear_switchingtime();
  static const int kSwitchingTimeFieldNumber = 3;
  inline float switchingtime() const;
  inline void set_switchingtime(float value);
  
  // required float idleTime = 4;
  inline bool has_idletime() const;
  inline void clear_idletime();
  static const int kIdleTimeFieldNumber = 4;
  inline float idletime() const;
  inline void set_idletime(float value);
  
  // required int32 nOfPreemptions = 5;
  inline bool has_nofpreemptions() const;
  inline void clear_nofpreemptions();
  static const int kNOfPreemptionsFieldNumber = 5;
  inline ::google::protobuf::int32 nofpreemptions() const;
  inline void set_nofpreemptions(::google::protobuf::int32 value);
  
  // required int32 nOfInvocations = 6;
  inline bool has_nofinvocations() const;
  inline void clear_nofinvocations();
  static const int kNOfInvocationsFieldNumber = 6;
  inline ::google::protobuf::int32 nofinvocations() const;
  inline void set_nofinvocations(::google::protobuf::int32 value);
  
  // required int32 nOfSleeps = 7;
  inline bool has_nofsleeps() const;
  inline void clear_nofsleeps();
  static const int kNOfSleepsFieldNumber = 7;
  inline ::google::protobuf::int32 nofsleeps() const;
  inline void set_nofsleeps(::google::protobuf::int32 value);
  
  // required bool off = 8;
  inline bool has_off() const;
  inline void clear_off();
  static const int kOffFieldNumber = 8;
  inline bool off() const;
  inline void set_off(bool value);
  
  // @@protoc_insertion_point(class_scope:Simulations.Result)
 private:
  inline void set_has_activetime();
  inline void clear_has_activetime();
  inline void set_has_sleeptime();
  inline void clear_has_sleeptime();
  inline void set_has_switchingtime();
  inline void clear_has_switchingtime();
  inline void set_has_idletime();
  inline void clear_has_idletime();
  inline void set_has_nofpreemptions();
  inline void clear_has_nofpreemptions();
  inline void set_has_nofinvocations();
  inline void clear_has_nofinvocations();
  inline void set_has_nofsleeps();
  inline void clear_has_nofsleeps();
  inline void set_has_off();
  inline void clear_has_off();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float activetime_;
  float sleeptime_;
  float switchingtime_;
  float idletime_;
  ::google::protobuf::int32 nofpreemptions_;
  ::google::protobuf::int32 nofinvocations_;
  ::google::protobuf::int32 nofsleeps_;
  bool off_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_simulations_2eproto();
  friend void protobuf_AssignDesc_simulations_2eproto();
  friend void protobuf_ShutdownFile_simulations_2eproto();
  
  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class Simulation : public ::google::protobuf::Message {
 public:
  Simulation();
  virtual ~Simulation();
  
  Simulation(const Simulation& from);
  
  inline Simulation& operator=(const Simulation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Simulation& default_instance();
  
  void Swap(Simulation* other);
  
  // implements Message ----------------------------------------------
  
  Simulation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Simulation& from);
  void MergeFrom(const Simulation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Simulations.Task tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::Simulations::Task& tasks(int index) const;
  inline ::Simulations::Task* mutable_tasks(int index);
  inline ::Simulations::Task* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::Simulations::Task >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Simulations::Task >*
      mutable_tasks();
  
  // required float utilization = 2;
  inline bool has_utilization() const;
  inline void clear_utilization();
  static const int kUtilizationFieldNumber = 2;
  inline float utilization() const;
  inline void set_utilization(float value);
  
  // required int32 core = 3;
  inline bool has_core() const;
  inline void clear_core();
  static const int kCoreFieldNumber = 3;
  inline ::google::protobuf::int32 core() const;
  inline void set_core(::google::protobuf::int32 value);
  
  // required int32 bet = 4;
  inline bool has_bet() const;
  inline void clear_bet();
  static const int kBetFieldNumber = 4;
  inline ::google::protobuf::int32 bet() const;
  inline void set_bet(::google::protobuf::int32 value);
  
  // optional .Simulations.Result res = 5;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 5;
  inline const ::Simulations::Result& res() const;
  inline ::Simulations::Result* mutable_res();
  inline ::Simulations::Result* release_res();
  
  // required bool feasible = 6;
  inline bool has_feasible() const;
  inline void clear_feasible();
  static const int kFeasibleFieldNumber = 6;
  inline bool feasible() const;
  inline void set_feasible(bool value);
  
  // @@protoc_insertion_point(class_scope:Simulations.Simulation)
 private:
  inline void set_has_utilization();
  inline void clear_has_utilization();
  inline void set_has_core();
  inline void clear_has_core();
  inline void set_has_bet();
  inline void clear_has_bet();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_feasible();
  inline void clear_has_feasible();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Simulations::Task > tasks_;
  float utilization_;
  ::google::protobuf::int32 core_;
  ::Simulations::Result* res_;
  ::google::protobuf::int32 bet_;
  bool feasible_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_simulations_2eproto();
  friend void protobuf_AssignDesc_simulations_2eproto();
  friend void protobuf_ShutdownFile_simulations_2eproto();
  
  void InitAsDefaultInstance();
  static Simulation* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// required int32 id = 1;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Task::id() const {
  return id_;
}
inline void Task::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 period = 2;
inline bool Task::has_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline ::google::protobuf::int32 Task::period() const {
  return period_;
}
inline void Task::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
}

// required int32 deadline = 3;
inline bool Task::has_deadline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_deadline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_deadline() {
  deadline_ = 0;
  clear_has_deadline();
}
inline ::google::protobuf::int32 Task::deadline() const {
  return deadline_;
}
inline void Task::set_deadline(::google::protobuf::int32 value) {
  set_has_deadline();
  deadline_ = value;
}

// required int32 wcet = 4;
inline bool Task::has_wcet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_wcet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_wcet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_wcet() {
  wcet_ = 0;
  clear_has_wcet();
}
inline ::google::protobuf::int32 Task::wcet() const {
  return wcet_;
}
inline void Task::set_wcet(::google::protobuf::int32 value) {
  set_has_wcet();
  wcet_ = value;
}

// -------------------------------------------------------------------

// Result

// required float activeTime = 1;
inline bool Result::has_activetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_activetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_activetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_activetime() {
  activetime_ = 0;
  clear_has_activetime();
}
inline float Result::activetime() const {
  return activetime_;
}
inline void Result::set_activetime(float value) {
  set_has_activetime();
  activetime_ = value;
}

// required float sleepTime = 2;
inline bool Result::has_sleeptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_sleeptime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_sleeptime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_sleeptime() {
  sleeptime_ = 0;
  clear_has_sleeptime();
}
inline float Result::sleeptime() const {
  return sleeptime_;
}
inline void Result::set_sleeptime(float value) {
  set_has_sleeptime();
  sleeptime_ = value;
}

// required float switchingTime = 3;
inline bool Result::has_switchingtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_switchingtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_switchingtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_switchingtime() {
  switchingtime_ = 0;
  clear_has_switchingtime();
}
inline float Result::switchingtime() const {
  return switchingtime_;
}
inline void Result::set_switchingtime(float value) {
  set_has_switchingtime();
  switchingtime_ = value;
}

// required float idleTime = 4;
inline bool Result::has_idletime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Result::set_has_idletime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Result::clear_has_idletime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Result::clear_idletime() {
  idletime_ = 0;
  clear_has_idletime();
}
inline float Result::idletime() const {
  return idletime_;
}
inline void Result::set_idletime(float value) {
  set_has_idletime();
  idletime_ = value;
}

// required int32 nOfPreemptions = 5;
inline bool Result::has_nofpreemptions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Result::set_has_nofpreemptions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Result::clear_has_nofpreemptions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Result::clear_nofpreemptions() {
  nofpreemptions_ = 0;
  clear_has_nofpreemptions();
}
inline ::google::protobuf::int32 Result::nofpreemptions() const {
  return nofpreemptions_;
}
inline void Result::set_nofpreemptions(::google::protobuf::int32 value) {
  set_has_nofpreemptions();
  nofpreemptions_ = value;
}

// required int32 nOfInvocations = 6;
inline bool Result::has_nofinvocations() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Result::set_has_nofinvocations() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Result::clear_has_nofinvocations() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Result::clear_nofinvocations() {
  nofinvocations_ = 0;
  clear_has_nofinvocations();
}
inline ::google::protobuf::int32 Result::nofinvocations() const {
  return nofinvocations_;
}
inline void Result::set_nofinvocations(::google::protobuf::int32 value) {
  set_has_nofinvocations();
  nofinvocations_ = value;
}

// required int32 nOfSleeps = 7;
inline bool Result::has_nofsleeps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Result::set_has_nofsleeps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Result::clear_has_nofsleeps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Result::clear_nofsleeps() {
  nofsleeps_ = 0;
  clear_has_nofsleeps();
}
inline ::google::protobuf::int32 Result::nofsleeps() const {
  return nofsleeps_;
}
inline void Result::set_nofsleeps(::google::protobuf::int32 value) {
  set_has_nofsleeps();
  nofsleeps_ = value;
}

// required bool off = 8;
inline bool Result::has_off() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Result::set_has_off() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Result::clear_has_off() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Result::clear_off() {
  off_ = false;
  clear_has_off();
}
inline bool Result::off() const {
  return off_;
}
inline void Result::set_off(bool value) {
  set_has_off();
  off_ = value;
}

// -------------------------------------------------------------------

// Simulation

// repeated .Simulations.Task tasks = 1;
inline int Simulation::tasks_size() const {
  return tasks_.size();
}
inline void Simulation::clear_tasks() {
  tasks_.Clear();
}
inline const ::Simulations::Task& Simulation::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::Simulations::Task* Simulation::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::Simulations::Task* Simulation::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Simulations::Task >&
Simulation::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Simulations::Task >*
Simulation::mutable_tasks() {
  return &tasks_;
}

// required float utilization = 2;
inline bool Simulation::has_utilization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Simulation::set_has_utilization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Simulation::clear_has_utilization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Simulation::clear_utilization() {
  utilization_ = 0;
  clear_has_utilization();
}
inline float Simulation::utilization() const {
  return utilization_;
}
inline void Simulation::set_utilization(float value) {
  set_has_utilization();
  utilization_ = value;
}

// required int32 core = 3;
inline bool Simulation::has_core() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Simulation::set_has_core() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Simulation::clear_has_core() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Simulation::clear_core() {
  core_ = 0;
  clear_has_core();
}
inline ::google::protobuf::int32 Simulation::core() const {
  return core_;
}
inline void Simulation::set_core(::google::protobuf::int32 value) {
  set_has_core();
  core_ = value;
}

// required int32 bet = 4;
inline bool Simulation::has_bet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Simulation::set_has_bet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Simulation::clear_has_bet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Simulation::clear_bet() {
  bet_ = 0;
  clear_has_bet();
}
inline ::google::protobuf::int32 Simulation::bet() const {
  return bet_;
}
inline void Simulation::set_bet(::google::protobuf::int32 value) {
  set_has_bet();
  bet_ = value;
}

// optional .Simulations.Result res = 5;
inline bool Simulation::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Simulation::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Simulation::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Simulation::clear_res() {
  if (res_ != NULL) res_->::Simulations::Result::Clear();
  clear_has_res();
}
inline const ::Simulations::Result& Simulation::res() const {
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::Simulations::Result* Simulation::mutable_res() {
  set_has_res();
  if (res_ == NULL) res_ = new ::Simulations::Result;
  return res_;
}
inline ::Simulations::Result* Simulation::release_res() {
  clear_has_res();
  ::Simulations::Result* temp = res_;
  res_ = NULL;
  return temp;
}

// required bool feasible = 6;
inline bool Simulation::has_feasible() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Simulation::set_has_feasible() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Simulation::clear_has_feasible() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Simulation::clear_feasible() {
  feasible_ = false;
  clear_has_feasible();
}
inline bool Simulation::feasible() const {
  return feasible_;
}
inline void Simulation::set_feasible(bool value) {
  set_has_feasible();
  feasible_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Simulations

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_simulations_2eproto__INCLUDED
